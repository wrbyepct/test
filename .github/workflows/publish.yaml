name: Build, Test, and Publish

on: 
  pull_request:
    types: [opened, synchronize]
    branches:
      '*'
  push:
    branches:
      - main
  workflow_dispatch:

jobs: 
  check-version-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # By default it fetch minimal branch info
        with:
          fetch-depth: 0 # fetch all branches info 
      - name: Tag with the release version
        run: |
          git tag $(cat version.txt)
          
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install pre-commit
        run: |
          pip install pre-commit
      - name: Lint
        run: |
          /bin/bash -x run lint:ci

  build-package:
    runs-on: ubuntu-latest
    env:
      DIRNAME: my_package
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build CLI
        run: | 
          pip install build

      - name: Build package
        run: |
          /bin/bash -x ./run build ${DIRNAME}

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-and-sdist
          path: ./${{ env.DIRNAME }}/dist # or path/to/artifact
  
  run-tests:
    needs: build-package
    runs-on: ubuntu-latest
    env:
      DIRNAME: my_package
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: wheel-and-sdist
          path: ./${{ env.DIRNAME }}/dist/

      - name: Install test dependencies
        run: |
          pip install pytest pytest-cov
      - name: Install package
        run: |
          pip install ./${DIRNAME}/dist/*.whl
      - name: Run tests
        run: |
          /bin/bash ./run test:ci


  publish:
    needs: 
      - check-version-tag
      - lint
      - build-package
      - run-tests
    runs-on: ubuntu-latest
    # If it's push from main branch
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    env:
      DIRNAME: my_package
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-twine
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: wheel-and-sdist
          path: ./${{ env.DIRNAME }}/dist

      - name: Install twine
        run: |
          pip install twine

      - name: Publish Test PyPI
        run: |
          /bin/bash -x ./run publish:test ${DIRNAME}
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }} 
          
      - name: Push tags
        run: |
          git push origin --tags 
          


  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"

      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"

      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"

      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      
      - name: Dump scerets
        env:
          SECRETS: ${{ toJson(secrets) }}
        run: echo "$SECRETS"

      - name: Dump variables
        env:
          VARIABLES: ${{ toJson(vars) }}
        run: echo "$VARIABLES"
